defmodule Request do
  defstruct method: "", path: "", base: "", body: "", timestamp: nil, key: nil, secret: nil, signature: nil

  require HTTPoison
  require Jason

  @base_url "https://api.coinbase.com/v2"
  
  
  @doc """
  Create a signed request struct
  """
  def new(method, path, body, key, secret, server_time) do
    %Request{
      method:    method,
      path:      path,
      body:      body,
      base:      @base_url,
      key:       key,
      secret:    secret,
      timestamp: server_time,
      signature: nil,
    }
    |>
    Request.sign
  end

  ##############################################################################################################################
  # API key authentication requires each request to be signed (enhanced security measure).				       #
  # You can create and activate new API keys in your API settings. Your API keys should be assigned to			       #
  # access only accounts and permission scopes that are necessary for your app to function.				       #
  # For more detail on which scopes are required to access corresponding endpoints and functionality, see the API reference.   #
  # 															       #
  # # Making a request													       #
  # 															       #
  # All REST requests must contain the following headers:								       #
  # 															       #
  #    CB-ACCESS-KEY API key as a string										       #
  #    CB-ACCESS-SIGN Message signature (see below)									       #
  #    CB-ACCESS-TIMESTAMP Timestamp for your request									       #
  # 															       #
  # All request bodies should have content type application/json and be valid JSON.					       #
  # 															       #
  # Example request:													       #
  # 															       #
  # ```															       #
  # curl https://api.coinbase.com/v2/user \										       #
  #      --header "CB-ACCESS-KEY: <your api key>" \									       #
  #      --header "CB-ACCESS-SIGN: <the user generated message signature>" \						       #
  #      --header "CB-ACCESS-TIMESTAMP: <a timestamp for your request>"							       #
  # 															       #
  # ```															       #
  # The CB-ACCESS-SIGN header is generated by creating a sha256 HMAC using the secret key				       #
  # on the prehash string timestamp + method + requestPath + body (where + represents string concatenation).		       #
  # The timestamp value is the same as the CB-ACCESS-TIMESTAMP header.							       #
  # 															       #
  # The body is the request body string. It is omitted if there is no request body (typically for GET requests).	       #
  # 															       #
  # The method should be UPPER CASE.											       #
  # 															       #
  # The requestPath is the full path and query parameters of the URL, e.g.: /v2/exchange-rates?currency=USD.		       #
  # 															       #
  # The CB-ACCESS-TIMESTAMP header MUST be number of seconds since Unix Epoch in UTC.					       #
  # 															       #
  # Your timestamp must be within 30 seconds of the API service time, or your request will be considered expired and rejected. #
  # We recommend using the time API endpoint to query for the API server time if you believe there may be a time skew between  #
  # your server and the API servers.											       #
  ##############################################################################################################################

  defp sign(request) do ## See https://docs.pro.coinbase.com/?ruby#signing-a-message
  end
  
  def send!(request) do
    payload = [
      body:             request.body,
      follow_redirects: true,
      headers:
      [
        "CB-ACCESS-KEY": request.key,
        "CB-ACCESS-SIGN": request.signature,
        "CB-ACCESS-TIMESTAMP": request.timestamp,
        "CB-VERSION": "2019-07-11",
        "Content-Type": "application/json",
      ]
    ]

    case request.method do
      :GET ->
        HTTPotion.get request.base <> request.path, payload
      :POST ->
        HTTPotion.post request.path, payload
      :PUT ->
        HTTPotion.put request.path, payload
      :PATCH ->
        HTTPotion.patch request.path, payload
      :DELETE ->
        HTTPotion.delete request.path, payload
      _ ->
        raise "Unrecognized HTTP verb '#{request.method}'"
    end
  end
  
  def server_time do
    response = Poison.decode! HTTPotion.get("https://api.coinbase.com/v2/time").body
    response["data"]["epoch"]
  end
end
